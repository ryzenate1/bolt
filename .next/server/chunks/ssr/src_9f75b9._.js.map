{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/app/ClientBody.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect } from \"react\";\n\nexport default function ClientBody({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  // Apply antialiased class to body on client side\n  useEffect(() => {\n    document.body.className = \"antialiased\";\n  }, []);\n\n  // Return children directly without extra div\n  return <>{children}</>;\n}\n"],"names":[],"mappings":";;;;;;AAAA;;;AAIe,SAAS,WAAW,EACjC,QAAQ,EAGT;IACC,iDAAiD;IACjD,CAAA,GAAA,+MAAA,CAAA,YAAS,AAAD,EAAE;QACR,SAAS,IAAI,CAAC,SAAS,GAAG;IAC5B,GAAG,EAAE;IAEL,6CAA6C;IAC7C,qBAAO;kBAAG;;AACZ"}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/context/CartContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';\n\n// Define the Fish interface (consistent with other pages)\nexport interface Fish {\n  id: string;\n  name: string;\n  src: string;\n  type: string;\n  price: number;\n  omega3: number;\n  protein: number;\n  calories: number;\n  benefits: string[];\n  bestFor: string[];\n  rating: number;\n  description?: string;\n  isPopular?: boolean;\n  serves?: string;\n  netWeight?: string;\n  grossWeight?: string;\n  originalPrice?: number;\n}\n\nexport interface CartItem extends Fish {\n  quantity: number;\n}\n\ninterface UserLocation {\n  address: string;\n  coordinates?: {\n    lat: number;\n    lng: number;\n  };\n  pincode?: string;\n}\n\ninterface CartContextType {\n  cart: CartItem[];\n  userLocation: UserLocation | null;\n  deliveryFee: number;\n  setUserLocation: (location: UserLocation | null) => void;\n  calculateDeliveryFee: (location: UserLocation) => Promise<number>;\n  addToCart: (fish: Fish, quantity: number) => void;\n  removeFromCart: (fishId: string) => void;\n  updateQuantity: (fishId: string, newQuantity: number) => void;\n  clearCart: () => void;\n  getCartTotal: () => number;\n  getCartItemCount: () => number;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\nexport const useCart = () => {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\n// Shop location coordinates (you'll need to set your shop's actual coordinates)\nconst SHOP_LOCATION = {\n  lat: 12.9716,  // Example: Chennai coordinates\n  lng: 80.0387\n};\n\n// Base delivery fee in INR\nconst BASE_DELIVERY_FEE = 40;\n\n// Maximum distance in kilometers for free delivery\nconst FREE_DELIVERY_THRESHOLD = 5;\n\n// Delivery fee per kilometer beyond free threshold\nconst FEE_PER_KM = 10;\n\n// Maximum delivery radius in kilometers\nconst MAX_DELIVERY_DISTANCE = 15;\n\nexport function CartProvider({ children }: CartProviderProps) {\n  const [cart, setCart] = useState<CartItem[]>([]);\n  const [userLocation, setUserLocation] = useState<UserLocation | null>(null);\n  const [deliveryFee, setDeliveryFee] = useState<number>(0);\n  \n  // Function to calculate distance between two coordinates using Haversine formula\n  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {\n    const R = 6371; // Radius of the earth in km\n    const dLat = (lat2 - lat1) * (Math.PI / 180);\n    const dLon = (lon2 - lon1) * (Math.PI / 180);\n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos((lat1 * Math.PI) / 180) * \n      Math.cos((lat2 * Math.PI) / 180) * \n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c; // Distance in km\n  };\n\n  // Calculate delivery fee based on distance\n  const calculateDeliveryFee = async (location: UserLocation): Promise<number> => {\n    if (!location.coordinates) {\n      return BASE_DELIVERY_FEE; // Default fee if no coordinates\n    }\n\n    const distance = calculateDistance(\n      SHOP_LOCATION.lat,\n      SHOP_LOCATION.lng,\n      location.coordinates.lat,\n      location.coordinates.lng\n    );\n\n    // If beyond maximum delivery distance\n    if (distance > MAX_DELIVERY_DISTANCE) {\n      return -1; // Indicates delivery not available\n    }\n\n    // Free delivery within threshold\n    if (distance <= FREE_DELIVERY_THRESHOLD) {\n      return 0;\n    }\n\n    // Calculate fee based on distance beyond free threshold\n    const distanceBeyondThreshold = distance - FREE_DELIVERY_THRESHOLD;\n    return Math.ceil(distanceBeyondThreshold * FEE_PER_KM);\n  };\n\n  // Update delivery fee when user location changes\n  useEffect(() => {\n    if (userLocation) {\n      calculateDeliveryFee(userLocation).then(fee => {\n        setDeliveryFee(fee !== -1 ? fee : BASE_DELIVERY_FEE);\n      });\n    } else {\n      setDeliveryFee(BASE_DELIVERY_FEE);\n    }\n  }, [userLocation]);\n\n  // Load cart from localStorage on initial render\n  useEffect(() => {\n    const storedCart = localStorage.getItem('tendercutsCart');\n    if (storedCart) {\n      setCart(JSON.parse(storedCart));\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('tendercutsCart', JSON.stringify(cart));\n  }, [cart]);\n\n  const addToCart = (fish: Fish, quantity: number) => {\n    setCart(prevCart => {\n      const existingItemIndex = prevCart.findIndex(item => item.id === fish.id);\n      if (existingItemIndex > -1) {\n        const updatedCart = [...prevCart];\n        updatedCart[existingItemIndex].quantity += quantity;\n        return updatedCart;\n      } else {\n        return [...prevCart, { ...fish, quantity }];\n      }\n    });\n    // setIsCartOpen(true); // Optionally open cart on add\n  };\n\n  const removeFromCart = (fishId: string) => {\n    setCart(prevCart => prevCart.filter(item => item.id !== fishId));\n  };\n\n  const updateQuantity = (fishId: string, newQuantity: number) => {\n    if (newQuantity <= 0) {\n      removeFromCart(fishId);\n    } else {\n      setCart(prevCart =>\n        prevCart.map(item =>\n          item.id === fishId ? { ...item, quantity: newQuantity } : item\n        )\n      );\n    }\n  };\n\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  const getCartTotal = () => {\n    return cart.reduce((total, item) => total + item.price * item.quantity, 0);\n  };\n\n  const getCartItemCount = () => {\n    return cart.reduce((count, item) => count + item.quantity, 0);\n  };\n\n  return (\n    <CartContext.Provider\n      value={{\n        cart,\n        userLocation,\n        deliveryFee,\n        setUserLocation,\n        calculateDeliveryFee,\n        addToCart,\n        removeFromCart,\n        updateQuantity,\n        clearCart,\n        getCartTotal,\n        getCartItemCount,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}